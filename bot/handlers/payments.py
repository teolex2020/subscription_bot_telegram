from aiogram import Router, F
from aiogram.types import PreCheckoutQuery, Message, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from config import PAYMENT_PROVIDER_TOKEN, CURRENCY, SUBSCRIPTION_PRICE
from bot.utils.logger import logger
from bot.services.subscription_service import activate_subscription
from bot.database.db import get_db

router = Router()

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑"
retry_button = InlineKeyboardButton(text="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="subscribe")
restart_button = InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É", callback_data="restart")
retry_keyboard = InlineKeyboardMarkup(inline_keyboard=[[retry_button], [restart_button]])

async def send_invoice(message: Message):
    try:
        chat_id = message.chat.id
        logger.info(f"üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ chat_id: {chat_id}")

        prices = [LabeledPrice(label="–ü—ñ–¥–ø–∏—Å–∫–∞", amount=SUBSCRIPTION_PRICE)]
        await message.bot.send_invoice(
            chat_id=chat_id,
            title="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç",
            description="–û—Ç—Ä–∏–º–∞–π –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–µ–º—ñ—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º—ñ—Å—è—Ü—å.",
            payload="subscription",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices,
            start_parameter="subscription-start"
        )
        logger.info(f"üì© –Ü–Ω–≤–æ–π—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
    except TelegramAPIError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É: {e}")
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=retry_keyboard
        )

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
        await pre_checkout_query.answer(ok=True)
    except TelegramAPIError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–ø–ª–∞—Ç–∏: {e}")

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    try:
        user_id = message.from_user.id
        async for db in get_db():
            subscription = await activate_subscription(db, message.bot, user_id)
            if subscription and subscription.invite_link:
                channel_button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url=subscription.invite_link)
                channel_keyboard = InlineKeyboardMarkup(inline_keyboard=[[channel_button], [restart_button]])
                await message.answer(
                    "‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n"
                    "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–µ–º—ñ—É–º-–∫–∞–Ω–∞–ª—É (–¥—ñ–π—Å–Ω–µ 1 –¥–µ–Ω—å):",
                    reply_markup=channel_keyboard
                )
                logger.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞, –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!")
            else:
                await message.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –∞–±–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                    reply_markup=retry_keyboard
                )
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    except TelegramAPIError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –æ–ø–ª–∞—Ç–∏: {e}")
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –æ–ø–ª–∞—Ç–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=retry_keyboard
        )