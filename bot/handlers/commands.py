from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from bot.handlers.payments import send_invoice
from bot.services.subscription_service import get_subscription
from bot.database.db import get_db
from bot.utils.logger import logger

router = Router()

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–†–æ–∑–ø–æ—á–∞—Ç–∏"
start_button = InlineKeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏", callback_data="start_subscription")
start_keyboard = InlineKeyboardMarkup(inline_keyboard=[[start_button]])

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"
subscribe_button = InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data="subscribe")
subscribe_keyboard = InlineKeyboardMarkup(inline_keyboard=[[subscribe_button]])

@router.message(Command("start"))
async def start_handler(message: Message):
    logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ {message.from_user.username}")
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ '–†–æ–∑–ø–æ—á–∞—Ç–∏', —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ!",
        reply_markup=start_keyboard
    )

@router.message(Command("check_access"))
async def check_access_handler(message: Message):
    logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /check_access –≤—ñ–¥ {message.from_user.username}")
    user_id = message.from_user.id
    async for db in get_db():
        subscription = await get_subscription(db, user_id)
        if subscription and subscription.is_active() and subscription.invite_link:
            channel_button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url=subscription.invite_link)
            channel_keyboard = InlineKeyboardMarkup(inline_keyboard=[[channel_button]])
            await message.answer(
                f"‚úÖ –£ –≤–∞—Å —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription.expiration_date.strftime('%Y-%m-%d %H:%M:%S')}!\n"
                "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–µ–º—ñ—É–º-–∫–∞–Ω–∞–ª—É:",
                reply_markup=channel_keyboard
            )
        else:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start."
            )

@router.callback_query(lambda c: c.data == "start_subscription")
async def show_benefits_handler(callback_query: types.CallbackQuery):
    logger.info(f"‚öôÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–†–æ–∑–ø–æ—á–∞—Ç–∏'")
    await callback_query.message.answer(
        "‚ú® –ü—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à:\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        "- –©–æ—Ç–∏–∂–Ω–µ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n\n"
        "–ì–æ—Ç–æ–≤–∏–π? –ù–∞—Ç–∏—Å–Ω–∏ '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'!",
        reply_markup=subscribe_keyboard
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "subscribe")
async def subscribe_handler(callback_query: types.CallbackQuery):
    logger.info(f"‚öôÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'")
    user_id = callback_query.from_user.id
    async for db in get_db():
        subscription = await get_subscription(db, user_id)
        if subscription and subscription.is_active():
            channel_button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url=subscription.invite_link)
            channel_keyboard = InlineKeyboardMarkup(inline_keyboard=[[channel_button]])
            await callback_query.message.answer(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription.expiration_date.strftime('%Y-%m-%d %H:%M:%S')}!\n"
                "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–µ–º—ñ—É–º-–∫–∞–Ω–∞–ª—É:",
                reply_markup=channel_keyboard
            )
            await callback_query.answer()
            return
    await send_invoice(callback_query.message)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "restart")
async def restart_handler(callback_query: types.CallbackQuery):
    logger.info(f"‚öôÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É'")
    await callback_query.message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ '–†–æ–∑–ø–æ—á–∞—Ç–∏', —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ!",
        reply_markup=start_keyboard
    )
    await callback_query.answer()