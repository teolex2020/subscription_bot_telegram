from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError
from bot.models.subscription import Subscription
from bot.utils.logger import logger
from aiogram import Bot
from config import PREMIUM_CHANNEL_ID
from datetime import datetime, timedelta

# –û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def get_subscription(db: AsyncSession, user_id: int):
    logger.info(f"üîé –û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    try:
        result = await db.execute(
            select(Subscription).where(Subscription.user_id == user_id)
        )
        subscription = result.scalar()
        if subscription:
            if subscription.is_active():
                logger.info(f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∞–∫—Ç–∏–≤–Ω–∞: {subscription}")
            else:
                logger.info(f"‚ö†Ô∏è –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞: {subscription}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return subscription
    except SQLAlchemyError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∫—É
async def create_subscription(db: AsyncSession, user_id: int):
    logger.info(f"‚ûï –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    try:
        subscription = Subscription(user_id=user_id)
        db.add(subscription)
        await db.commit()
        await db.refresh(subscription)
        logger.info(f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        return subscription
    except SQLAlchemyError as e:
        await db.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

# –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É
async def generate_invite_link(bot: Bot, user_id: int) -> str:
    try:
        invite = await bot.create_chat_invite_link(
            chat_id=PREMIUM_CHANNEL_ID,
            expire_date=int((datetime.utcnow() + timedelta(days=1)).timestamp()),
            member_limit=1
        )
        logger.info(f"üîó –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {invite.invite_link}")
        return invite.invite_link
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

# –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
async def activate_subscription(db: AsyncSession, bot: Bot, user_id: int):
    logger.info(f"üöÄ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    try:
        subscription = await get_subscription(db, user_id)
        if not subscription:
            subscription = await create_subscription(db, user_id)
            if not subscription:
                return None
        subscription.activate()
        invite_link = await generate_invite_link(bot, user_id)
        if invite_link:
            subscription.invite_link = invite_link
        else:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return None
        await db.commit()
        await db.refresh(subscription)
        logger.info(f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –¥–æ {subscription.expiration_date}")
        return subscription
    except SQLAlchemyError as e:
        await db.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

# –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –∫–∞–Ω–∞–ª—É –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
async def remove_expired_users(bot: Bot, get_db_func):
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫...")
    async for db in get_db_func():  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        try:
            result = await db.execute(select(Subscription))
            subscriptions = result.scalars().all()
            for subscription in subscriptions:
                if subscription.expiration_date and subscription.expiration_date < datetime.utcnow():
                    try:
                        await bot.ban_chat_member(chat_id=PREMIUM_CHANNEL_ID, user_id=subscription.user_id)
                        subscription.deactivate()
                        await db.commit()
                        logger.info(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {subscription.user_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏")
                    except Exception as e:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {subscription.user_id}: {e}")
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫: {e}")