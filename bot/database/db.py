from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from bot.utils.logger import logger

# –°—Ç—Ä–æ–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
DATABASE_URL = "sqlite+aiosqlite:///database.db"

# –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –¥–≤–∏–∂–æ–∫
engine = create_async_engine(
    DATABASE_URL,
    connect_args={"check_same_thread": False},  # –î–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ SQLite —É –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Ç–æ–∫–∞—Ö
)

# –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Å–µ—Å—ñ—é
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    autocommit=False,
    autoflush=False,
)

# –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –º–æ–¥–µ–ª—ñ
Base = declarative_base()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def check_connection():
    try:
        async with engine.begin() as conn:
            await conn.execute("SELECT 1")  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            logger.info("üì• –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
            yield session
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Å—ñ—î—é: {e}")
            await session.rollback()
            raise
        finally:
            await session.close()
            logger.info("üì§ –°–µ—Å—ñ—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–∞")